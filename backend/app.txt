require('dotenv').config();
const PORT = process.env.PORT || 10000;

// CORE MODULES
const express = require('express');
const mongoose = require('mongoose');
const cookieParser = require('cookie-parser');
const cors = require('cors');
const path = require('path');

// Custom logger function with colors and timestamps
const logger = {
  info: (message) => console.log(`\x1b[36m[INFO][${new Date().toISOString()}]\x1b[0m ${message}`),
  success: (message) => console.log(`\x1b[32m[SUCCESS][${new Date().toISOString()}]\x1b[0m ${message}`),
  warn: (message) => console.log(`\x1b[33m[WARN][${new Date().toISOString()}]\x1b[0m ${message}`),
  error: (message) => console.log(`\x1b[31m[ERROR][${new Date().toISOString()}]\x1b[0m ${message}`),
  debug: (message) => console.log(`\x1b[35m[DEBUG][${new Date().toISOString()}]\x1b[0m ${message}`)
};

logger.info('Starting Student Portal API server...');
logger.debug(`Environment: ${process.env.NODE_ENV || 'development'}`);
logger.debug(`Port: ${PORT}`);

const app = express();

// MIDDLEWARE - with logging
logger.info('Loading middleware...');
app.use(express.json());
app.use((req, res, next) => {
  logger.debug(`Incoming request: ${req.method} ${req.path}`);
  next();
});
app.use(cookieParser());
app.use(cors({
    origin: process.env.CLIENT_URL,
    credentials: true
}));
logger.debug(`CORS configured for origin: ${process.env.CLIENT_URL || 'Not set'}`);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));
logger.info('Static files serving enabled from /public');

// CONNECTION TO MONGODB
const connectDB = require('./config/database');
logger.info('Attempting MongoDB connection...');
connectDB().then(() => {
  logger.success('MongoDB connection established');
}).catch((error) => {
  logger.error(`MongoDB connection failed: ${error.message}`);
});

// ROUTES - with route logging
logger.info('Loading API routes...');

const routes = [
  { path: '/api/students', name: 'StudentAuth' },
  { path: '/api/students/Attendance', name: 'Attendance' },
  { path: '/api/students/Calendar', name: 'Calendar' },
  { path: '/api/students/Homework', name: 'Homework' },
  { path: '/api/students/Marks', name: 'Marks' },
  { path: '/api/students/Notice', name: 'Notice' },
  { path: '/api/students/Timetable', name: 'Timetable' }
];

// Import and use routes with logging
routes.forEach(route => {
  try {
    const routeModule = require(`./Routes/${route.name}`);
    app.use(route.path, routeModule);
    logger.debug(`Route loaded: ${route.path} -> ${route.name}`);
  } catch (error) {
    logger.error(`Failed to load route ${route.name}: ${error.message}`);
  }
});

// Request logging middleware (place after routes to log all requests)
app.use((req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    const statusColor = res.statusCode >= 400 ? '\x1b[31m' : res.statusCode >= 300 ? '\x1b[33m' : '\x1b[32m';
    logger.debug(`${statusColor}${req.method} ${req.originalUrl} - ${res.statusCode} (${duration}ms)\x1b[0m`);
  });
  
  next();
});

// Default Route - Serve the HTML page
app.get('/', (req, res) => {
  logger.debug('Serving landing page');
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  logger.debug('Health check requested');
  res.json({ 
    status: 'success', 
    message: 'Student Portal API is running!',
    timestamp: new Date().toISOString(),
    port: PORT,
    environment: process.env.NODE_ENV || 'development',
    database: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
  });
});

// 404 handler for undefined routes
app.use('*', (req, res) => {
  logger.warn(`404 - Route not found: ${req.originalUrl}`);
  res.status(404).json({ 
    error: 'Route not found',
    path: req.originalUrl,
    timestamp: new Date().toISOString()
  });
});

// Global error handling middleware
app.use((error, req, res, next) => {
  logger.error(`Unhandled error: ${error.message}`);
  logger.error(error.stack);
  
  res.status(500).json({
    error: process.env.NODE_ENV === 'production' ? 'Internal server error' : error.message,
    timestamp: new Date().toISOString()
  });
});

// Graceful shutdown handling
process.on('SIGINT', () => {
  logger.info('Received SIGINT. Shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('Received SIGTERM. Shutting down gracefully...');
  process.exit(0);
});

// Start Server
app.listen(PORT, () => {
  logger.success(`🚀 Server running on port ${PORT}`);
  logger.info(`📊 Health check available at: http://localhost:${PORT}/api/health`);
  logger.info(`🌐 Landing page available at: http://localhost:${PORT}`);
  logger.debug('Server startup completed successfully');
});

module.exports = app;
